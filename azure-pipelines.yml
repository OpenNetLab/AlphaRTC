# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

pr:
  autoCancel: true
  branches:
    include:
    - main

pool:
  vmImage: 'ubuntu-latest'


steps:

- checkout: self

- script: make init
  displayName: 'build compile environment'

- script: make sync
  displayName: 'sync dependencies'

- script: make app
  displayName: 'build application'

- script: make release
  displayName: 'build release image'

- script: docker run -d --rm -v `pwd`/examples/peerconnection/challenge_client/corpus:/app -w /app --name gcc gcc peerconnection_serverless_gcc receiver.json
            && docker exec gcc peerconnection_serverless_gcc sender.json
  displayName: 'run GCC example'

- script: docker save alphartc | gzip > alphartc.tar.gz
  displayName: "Export alphartc docker image"

- publish: $(System.DefaultWorkingDirectory)/alphartc.tar.gz
  continueOnError: true
  artifact: alphartc.tar.gz
  displayName: "Archive AlphaRTC Peerconnection"

- script: docker image tag alphartc:latest $(dockerRegistry)/alphartc:latest
  displayName: 'Tag alphartc image'

- task: Docker@2
  inputs:
    containerRegistry: 'opennetlab Azure registry'
    repository: 'alphartc'
    command: 'push'
    tags: 'latest'
  displayName: "Push alphartc image"
